
* Termminal
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
;;Short windows + return
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Gadgets
** Org
*** org-bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Basic
*** comman setting
   #+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
   #+END_SRC
*** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** basic functions
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq x-select-enable-clipboard t)

(setq make-backup-files nil)
(setq auto-save-default nil)
(setq scroll-conservatively 100)
(setq ring-bell-function 'ignore)
(defalias 'yes-or-no-p 'y-or-n-p)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
*** which
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
*** wrap-region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :ensure t
  :init (wrap-region-mode t))
#+END_SRC
*** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode t))
#+END_SRC

*** show curser
#+BEGIN_SRC emacs-lisp
;; find the curse when you switch the buffer
(when window-system (global-hl-line-mode t))
#+END_SRC
*** lambda 
#+BEGIN_SRC emacs-lisp
;; Add ascii symbals when you are writing their names. ie lambda changes to lambdas symbol
(when window-system (global-prettify-symbols-mode t)) 
#+END_SRC
*** line numbers and columsn in status bard
#+BEGIN_SRC emacs-lis
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC
*** Kill current Buffer
#+BEGIN_SRC emacs-lips
(defun kill-current-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
 
*** clock
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
*** projectil
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1))

#+END_SRC
*** spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
* Programming
** common
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    )
#+END_SRC
*** cameCase Search
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** parenthse
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
:diminish smartparens-mode
:config(add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC
** HTML
*** emmet-mode
#+BEGIN_SRC emacs-lsip
(use-package emmet-mode 
:ensure t
:config
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
)
#+END_SRC
*** projecttile

*** Auto-complete
#+BEGIN_SRC emacs-lisp
         (use-package company
           :ensure t
           :init
           (add-hook 'after-init-hook 'global-company-mode)
           :config
           (add-hook 'js-mode-hook (lambda () (tern-mode t)))
           (add-to-list 'company-backends 'company-tern)
           (add-hook 'css-mode-hook
             (lambda ()
               (set (make-local-variable 'company-backends) '(company-css))))
   )
#+END_SRC
*** snippet
    You have to press M-/ to complete the snippet;
#+BEGIN_SRC emacs-lisp

(use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/yasnippet")
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/html-mode")      
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets/js2-mode")
      (yas-global-mode)
      (global-set-key (kbd "M-/") 'company-yasnippet))

      #+END_SRC
*** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
      :init
      (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
        (add-hook hook 'rainbow-mode)))


#+END_SRC
*** rainbow-de
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
*** line numbers and programming

Uncle Dave says:
" Every now and then all of us feel the urge to be productive and write some code.
In the event that this happens, the following bit of configuration makes sure that 
we have access to relative line numbering in programming-related modes.
I highly recommend not enabling =linum-relative-mode= globally, as it messed up 
something like =ansi-term= for instance."
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
*** dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "Welcome to Emacs!"))

#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :init
      (add-to-list 'company-backends 'company-jedi))
#+END_SRC
   
** javascript
#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
 (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))
  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'js2-mode-hook 'js2-refactor-mode))
  (use-package rjsx-mode
    :ensure t)
(use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                          "--trailing-comma" "es5"
                          "--single-quote" "true"
                          "--print-width" "100"
                          ))
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'rjsx-mode-hook 'prettier-js-mode))
  (defun jc/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (use-package web-mode
    :ensure t)
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
:init (setq markdown-command "multimarkdown"))
#+END_SRC
** TernJs
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :init
  (setq company-dabbrev-ignore-case t
        company-dabbrev-downcase nil)
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-tern
    :ensure t
:init (add-to-list 'company-backends 'company-tern)))

#+END_SRC
** fzf
#+BEGIN_SRC emacs-lisp
(use-package fzf
  :ensure t)
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
    (add-to-list 'flycheck-checkers 'proselint))
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Following window splits
After you split a window, your focus remains in the previous one.
This annoyed me so much I wrote these two, they take care of it.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** delete a world
   #+BEGIN_SRC emacs-lisp
        (defun delete-whole-word()
          (interactive)
     (backward-word)
     (kill-word 1)
     )
     (global-set-key (kbd "C-c w w") 'delete-whole-word)
   #+END_SRC
** deleteWhiteSpace
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config
    (global-hungry-delete-mode))
#+END_SRC
** sudo edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :ensure t
  :bind
    ("s-e" . sudo-edit))
#+END_SRC
* Buffer
** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

** expert Buffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** IDO
*** ido-enable
 C-x b would show list of files in buffer
   #+BEGIN_SRC emacs-lisp
     (setq ido-enable-flex-matching nil)
     (setq ido-create-new-buffer 'always)
     (setq ido-everywhere t)
     (ido-mode 1)
   #+END_SRC

*** ido-vertical
Shows the list of files in buffter verticale
   #+BEGIN_SRC emacs-lisp
     (use-package ido-vertical-mode
       :ensure t
       :init
       (ido-vertical-mode 1)
       (setq ido-vertical-define-keys 'C-n-and-C-p-only)
       )
   #+END_SRC
** smex
M-x show the commands simpler
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex)
    )
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** close all Buffer
#+BEGIN_SRC emacs-lisp
(defun close-all-buffers ()
  "Kill all buffers without regard for their origin."
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
(global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

* load config
** load
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org")
    )
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload

#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name) "~/.emacs.d/config.org")
    )
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC




